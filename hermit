#!/usr/bin/env python3
import argparse
import logging

try:
    import matplotlib  # noqa
    matplotlib.use('agg')  # noqa
    import pandas as pd
    import matplotlib.pyplot as plt
    import numpy as np
except ImportError:
    import sys
    print("Error: Install pandas and matplotlib to plot!", file=sys.stderr)


def cpuPlot(df, tag):
    fig, ax = plt.subplots()
    cpucol = [c for c in df.columns if "cpu" in c]
    syscol = [c for c in df.columns if "sys" in c]

    # for c, s in zip(cpucol, syscol):
    #     df[c] = df[c] / (df[c] + df[s])

    df['total_cpu'] = np.zeros(shape=df.shape[0])
    df['total_sys'] = np.zeros(shape=df.shape[0])
    for c, s in zip(cpucol, syscol):
        df['total_cpu'] += df[c]
        df['total_sys'] += df[s]

    df['total_cpu'] = df['total_cpu'].rolling(10).apply(lambda x: x.iloc[-1] - x.iloc[0])
    df['total_cpu'].plot()

    df['total_sys'] = df['total_sys'].rolling(10).apply(lambda x: x.iloc[-1] - x.iloc[0])
    df['total_sys'].plot()


    for c, s in zip(cpucol, syscol):
        df[c] = df[c].rolling(10).apply(lambda x: x.iloc[-1] - x.iloc[0])
        df[s] = df[s].rolling(10).apply(lambda x: x.iloc[-1] - x.iloc[0])


    ax.twinx()
    for c, s in zip(cpucol, syscol):
        df[c].plot(alpha=0.1, color='k')


    # df['cpu_percent'].rolling('60s').mean().plot(label="Average usage (1m)")
    # df['cpu_percent'].rolling('120s').mean().plot(label="Average usage (2m)")
    plt.title(f"cpu percentage {tag}")
    plt.ylabel("cpu percentage [%]")
    plt.xlabel("time")
    # lgn = plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')

    if tag is None:
        plt.savefig("cpu.png")
    else:
        plt.savefig(f"{tag}_cpu.png",
                    # bbox_extra_artists=[lgn],
                    bbox_inches='tight')
    plt.clf()


def memPlot(df, tag):
    df['mem'] = (df['mem'] - df['mem'].iloc[0]) * 1e-9
    df['mem'].plot(label="Raw memory usage")
    df['mem'].rolling('60s').mean().plot(
        label="Average usage (1m)")
    # df['mem'].rolling('120s').mean().plot(
    #     label="Average usage (2m)")
    plt.title(f"memory usage {tag}")
    plt.ylabel("memory usage [GB]")
    plt.xlabel("time")
    lgn = plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')

    if tag is None:
        plt.savefig("mem.png")
    else:
        plt.savefig(f"{tag}_mem.png",
                    bbox_extra_artists=[lgn],
                    bbox_inches='tight')

    plt.clf()


def plotter(infile: str, tag: str):
    """
    Plot the results from the runner step. 
    It can be done after the fact with `-j` option to just plot.

    Args:
        infile (str, optional): Input filename for csv. Defaults to "stats.csv".
    """

    # Default to input name without extention
    if tag is None:
        tag = infile[:-4]

    # Load in dataframe and put 0th column as DateTimeIndex
    df = pd.read_csv(infile,
                     index_col=[0],
                     parse_dates=[0])

    cpuPlot(df, tag)
    memPlot(df, tag)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--tag", type=str,
                        help="Tags the process and gives a name to the plots and statistcs csv file.",
                        default=None)
    parser.add_argument("-d", "--debug", action="store_true",
                        help="Run with debugging info.",
                        default=False)
    parser.add_argument("-i", "--input", type=str,
                        help="Input statistics file from pagurus",
                        default=None)

    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(
            format='%(asctime)s %(levelname)s ==> %(message)s', level=logging.INFO)
    else:
        logging.basicConfig(level=logging.FATAL)

    logging.info(f'Using tag {args.tag}')

    plotter(infile=args.input,
            tag=f"{args.tag}" if args.tag is not None else None)
